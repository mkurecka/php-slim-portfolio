<?php

declare(strict_types=1);

namespace Tests\Domain\Contact;

use App\Domain\Contact\ContactSubmission;
use PHPUnit\Framework\TestCase;

class ContactSubmissionTest extends TestCase
{
    public function testContactSubmissionCreationWithAllFields(): void
    {
        $submission = new ContactSubmission(
            'John Doe',
            'john@example.com',
            'Test Subject',
            'Test message content',
            'test-id-123',
            '2023-01-01 12:00:00',
            '192.168.1.1'
        );

        $this->assertEquals('John Doe', $submission->getName());
        $this->assertEquals('john@example.com', $submission->getEmail());
        $this->assertEquals('Test Subject', $submission->getSubject());
        $this->assertEquals('Test message content', $submission->getMessage());
        $this->assertEquals('test-id-123', $submission->getId());
        $this->assertEquals('2023-01-01 12:00:00', $submission->getDate());
        $this->assertEquals('192.168.1.1', $submission->getIp());
    }

    public function testContactSubmissionCreationWithMinimalFields(): void
    {
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
        
        $submission = new ContactSubmission(
            'John Doe',
            'john@example.com',
            'Test Subject',
            'Test message content'
        );

        $this->assertEquals('John Doe', $submission->getName());
        $this->assertEquals('john@example.com', $submission->getEmail());
        $this->assertEquals('Test Subject', $submission->getSubject());
        $this->assertEquals('Test message content', $submission->getMessage());
        
        $this->assertNotEmpty($submission->getId());
        $this->assertNotEmpty($submission->getDate());
        $this->assertEquals('127.0.0.1', $submission->getIp());
        
        unset($_SERVER['REMOTE_ADDR']);
    }

    public function testAutoGeneratedIdIsUnique(): void
    {
        $submission1 = new ContactSubmission('John', 'john@example.com', 'Subject', 'Message');
        $submission2 = new ContactSubmission('Jane', 'jane@example.com', 'Subject', 'Message');

        $this->assertNotEquals($submission1->getId(), $submission2->getId());
    }

    public function testAutoGeneratedDateIsCurrentTime(): void
    {
        $beforeCreation = date('Y-m-d H:i:s');
        $submission = new ContactSubmission('John', 'john@example.com', 'Subject', 'Message');
        $afterCreation = date('Y-m-d H:i:s');

        $submissionDate = $submission->getDate();
        $this->assertGreaterThanOrEqual($beforeCreation, $submissionDate);
        $this->assertLessThanOrEqual($afterCreation, $submissionDate);
    }

    public function testIpFallbackWhenServerVarNotSet(): void
    {
        unset($_SERVER['REMOTE_ADDR']);
        
        $submission = new ContactSubmission(
            'John Doe',
            'john@example.com',
            'Test Subject',
            'Test message content'
        );

        $this->assertEquals('unknown', $submission->getIp());
    }

    public function testToArrayContainsAllFields(): void
    {
        $submission = new ContactSubmission(
            'John Doe',
            'john@example.com',
            'Test Subject',
            'Test message content',
            'test-id-123',
            '2023-01-01 12:00:00',
            '192.168.1.1'
        );

        $array = $submission->toArray();

        $expected = [
            'id' => 'test-id-123',
            'name' => 'John Doe',
            'email' => 'john@example.com',
            'subject' => 'Test Subject',
            'message' => 'Test message content',
            'date' => '2023-01-01 12:00:00',
            'ip' => '192.168.1.1'
        ];

        $this->assertEquals($expected, $array);
    }

    public function testFromArrayCreatesCorrectContactSubmission(): void
    {
        $data = [
            'id' => 'test-id-123',
            'name' => 'John Doe',
            'email' => 'john@example.com',
            'subject' => 'Test Subject',
            'message' => 'Test message content',
            'date' => '2023-01-01 12:00:00',
            'ip' => '192.168.1.1'
        ];

        $submission = ContactSubmission::fromArray($data);

        $this->assertEquals('test-id-123', $submission->getId());
        $this->assertEquals('John Doe', $submission->getName());
        $this->assertEquals('john@example.com', $submission->getEmail());
        $this->assertEquals('Test Subject', $submission->getSubject());
        $this->assertEquals('Test message content', $submission->getMessage());
        $this->assertEquals('2023-01-01 12:00:00', $submission->getDate());
        $this->assertEquals('192.168.1.1', $submission->getIp());
    }

    public function testFromArrayWithMissingFieldsUsesDefaults(): void
    {
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
        
        $data = [
            'name' => 'John Doe',
            'email' => 'john@example.com',
            'subject' => 'Test Subject',
            'message' => 'Test message content'
        ];

        $submission = ContactSubmission::fromArray($data);

        $this->assertEquals('John Doe', $submission->getName());
        $this->assertEquals('john@example.com', $submission->getEmail());
        $this->assertEquals('Test Subject', $submission->getSubject());
        $this->assertEquals('Test message content', $submission->getMessage());
        
        $this->assertNotEmpty($submission->getId());
        $this->assertNotEmpty($submission->getDate());
        $this->assertEquals('127.0.0.1', $submission->getIp());
        
        unset($_SERVER['REMOTE_ADDR']);
    }

    public function testArrayConversionRoundtrip(): void
    {
        $originalSubmission = new ContactSubmission(
            'John Doe',
            'john@example.com',
            'Test Subject',
            'Test message content',
            'test-id-123',
            '2023-01-01 12:00:00',
            '192.168.1.1'
        );

        $array = $originalSubmission->toArray();
        $newSubmission = ContactSubmission::fromArray($array);

        $this->assertEquals($originalSubmission->toArray(), $newSubmission->toArray());
    }
}